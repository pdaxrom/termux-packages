diff -Nur gcc-14.1.0/gcc/ada/libgnarl/s-linux__android.ads gcc-14.1.0-new/gcc/ada/libgnarl/s-linux__android.ads
--- gcc-14.1.0/gcc/ada/libgnarl/s-linux__android.ads	2024-05-07 10:51:37.000000000 +0400
+++ gcc-14.1.0-new/gcc/ada/libgnarl/s-linux__android.ads	2024-12-09 07:07:26.321933580 +0400
@@ -89,6 +89,7 @@
    SIGKILL    : constant := 9; --  kill (cannot be caught or ignored)
    SIGBUS     : constant := 7; --  bus error
    SIGSEGV    : constant := 11; --  segmentation violation
+   SIGSYS     : constant := 12; --  bad system call
    SIGPIPE    : constant := 13; --  write on a pipe with no one to read it
    SIGALRM    : constant := 14; --  alarm clock
    SIGTERM    : constant := 15; --  software termination signal from kill
diff -Nur gcc-14.1.0/gcc/ada/libgnarl/s-osinte__android.ads gcc-14.1.0-new/gcc/ada/libgnarl/s-osinte__android.ads
--- gcc-14.1.0/gcc/ada/libgnarl/s-osinte__android.ads	2024-05-07 10:51:37.000000000 +0400
+++ gcc-14.1.0-new/gcc/ada/libgnarl/s-osinte__android.ads	2024-12-09 07:07:26.321933580 +0400
@@ -115,6 +115,7 @@
    SIGXFSZ    : constant := System.Linux.SIGXFSZ;
    SIGUNUSED  : constant := System.Linux.SIGUNUSED;
    SIGSTKFLT  : constant := System.Linux.SIGSTKFLT;
+   SIGSYS     : constant := System.Linux.SIGSYS;
 
    SIGADAABORT : constant := SIGABRT;
    --  Change this to use another signal for task abort. SIGTERM might be a
diff -Nur gcc-14.1.0/gcc/config/aarch64/aarch64-linux.h gcc-14.1.0-new/gcc/config/aarch64/aarch64-linux.h
--- gcc-14.1.0/gcc/config/aarch64/aarch64-linux.h	2024-05-07 10:51:37.000000000 +0400
+++ gcc-14.1.0-new/gcc/config/aarch64/aarch64-linux.h	2024-12-09 07:07:26.321933580 +0400
@@ -22,6 +22,7 @@
 #define GCC_AARCH64_LINUX_H
 
 #define GLIBC_DYNAMIC_LINKER "/lib/ld-linux-aarch64%{mbig-endian:_be}%{mabi=ilp32:_ilp32}.so.1"
+#define GLIBC_DYNAMIC_LINKER64 "/lib/ld-linux-aarch64%{mbig-endian:_be}%{mabi=ilp32:_ilp32}.so.1"
 
 #undef MUSL_DYNAMIC_LINKER
 #define MUSL_DYNAMIC_LINKER "/lib/ld-musl-aarch64%{mbig-endian:_be}%{mabi=ilp32:_ilp32}.so.1"
@@ -30,7 +31,15 @@
 #define ASAN_CC1_SPEC "%{%:sanitize(address):-funwind-tables}"
 
 #undef  CC1_SPEC
-#define CC1_SPEC GNU_USER_TARGET_CC1_SPEC ASAN_CC1_SPEC
+#define CC1_SPEC							\
+  LINUX_OR_ANDROID_CC (GNU_USER_TARGET_CC1_SPEC " " ASAN_CC1_SPEC " "	\
+		       ,						\
+		       GNU_USER_TARGET_CC1_SPEC " " ASAN_CC1_SPEC " "	\
+		       ANDROID_CC1_SPEC)
+
+#define CC1PLUS_SPEC \
+  LINUX_OR_ANDROID_CC ("", ANDROID_CC1PLUS_SPEC)
+
 
 #define CPP_SPEC "%{pthread:-D_REENTRANT}"
 
@@ -40,14 +49,26 @@
    %{symbolic:-Bsymbolic}			\
    %{!static:%{!static-pie:			\
      %{rdynamic:-export-dynamic}		\
-     %{!shared:-dynamic-linker " GNU_USER_DYNAMIC_LINKER "}}} \
+     %{!shared:-dynamic-linker " GNU_USER_DYNAMIC_LINKER64 "}}} \
    %{static-pie:-Bstatic -pie --no-dynamic-linker -z text} \
    -X						\
    %{mbig-endian:-EB} %{mlittle-endian:-EL}     \
    -maarch64linux%{mabi=ilp32:32}%{mbig-endian:b}"
 
-
-#define LINK_SPEC LINUX_TARGET_LINK_SPEC AARCH64_ERRATA_LINK_SPEC
+#undef  LINK_SPEC
+#define LINK_SPEC							\
+  LINUX_OR_ANDROID_LD (LINUX_TARGET_LINK_SPEC,				\
+		       LINUX_TARGET_LINK_SPEC " " ANDROID_LINK_SPEC)	\
+  AARCH64_ERRATA_LINK_SPEC
+
+#undef  LIB_SPEC
+#define LIB_SPEC							\
+  LINUX_OR_ANDROID_LD (GNU_USER_TARGET_LIB_SPEC,			\
+		    GNU_USER_TARGET_NO_PTHREADS_LIB_SPEC " " ANDROID_LIB_SPEC)
+
+#undef	STARTFILE_SPEC
+#define STARTFILE_SPEC \
+  LINUX_OR_ANDROID_LD (GNU_USER_TARGET_STARTFILE_SPEC, ANDROID_STARTFILE_SPEC)
 
 #define GNU_USER_TARGET_MATHFILE_SPEC \
   "%{Ofast|ffast-math|funsafe-math-optimizations:%{!shared:crtfastmath.o%s}}"
@@ -55,15 +76,19 @@
 #undef ENDFILE_SPEC
 #define ENDFILE_SPEC   \
   GNU_USER_TARGET_MATHFILE_SPEC " " \
-  GNU_USER_TARGET_ENDFILE_SPEC
+  LINUX_OR_ANDROID_LD (GNU_USER_TARGET_ENDFILE_SPEC, ANDROID_ENDFILE_SPEC)
 
 #define TARGET_OS_CPP_BUILTINS()		\
   do						\
     {						\
 	GNU_USER_TARGET_OS_CPP_BUILTINS();	\
+	ANDROID_TARGET_OS_CPP_BUILTINS();	\
     }						\
   while (0)
 
+#define EXTRA_TARGET_D_OS_VERSIONS()           \
+  ANDROID_TARGET_D_OS_VERSIONS();
+
 #define TARGET_ASM_FILE_END aarch64_file_end_indicate_exec_stack
 
 /* Uninitialized common symbols in non-PIE executables, even with
diff -Nur gcc-14.1.0/gcc/config.gcc gcc-14.1.0-new/gcc/config.gcc
--- gcc-14.1.0/gcc/config.gcc	2024-05-07 10:51:37.000000000 +0400
+++ gcc-14.1.0-new/gcc/config.gcc	2024-12-09 07:07:26.325933580 +0400
@@ -1248,6 +1248,10 @@
 	aarch64_be-*)
 		tm_defines="${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1"
 		;;
+	aarch64*-*-linux*-android*)
+		tm_file="${tm_file} linux-android.h"
+		extra_options="${extra_options} linux-android.opt"
+		;;
 	esac
 	aarch64_multilibs="${with_multilib_list}"
 	if test "$aarch64_multilibs" = "default"; then
diff -Nur gcc-14.1.0/gcc/opts-common.cc gcc-14.1.0-new/gcc/opts-common.cc
--- gcc-14.1.0/gcc/opts-common.cc	2024-05-07 10:51:38.000000000 +0400
+++ gcc-14.1.0-new/gcc/opts-common.cc	2024-12-09 07:07:26.325933580 +0400
@@ -180,7 +180,7 @@
 integral_argument (const char *arg, int *err, bool byte_size_suffix)
 {
   if (!err)
-    err = &errno;
+    err = (int *) &errno;
 
   if (!ISDIGIT (*arg))
     {
diff -Nur gcc-14.1.0/libcpp/files.cc gcc-14.1.0-new/libcpp/files.cc
--- gcc-14.1.0/libcpp/files.cc	2024-05-07 10:51:41.000000000 +0400
+++ gcc-14.1.0-new/libcpp/files.cc	2024-12-09 07:07:26.329933580 +0400
@@ -763,11 +763,15 @@
     cpp_error_at (pfile, CPP_DL_WARNING, loc,
 	       "%s is shorter than expected", file->path);
 
+  off_t _st_size = file->st.st_size;
+
   file->buffer = _cpp_convert_input (pfile,
 				     input_charset,
 				     buf, size + 16, total,
 				     &file->buffer_start,
-				     &file->st.st_size);
+				     &_st_size);
+
+  file->st.st_size = _st_size;
   file->buffer_valid = file->buffer;
   return file->buffer_valid;
 }
diff -Nur gcc-14.1.0/libcpp/macro.cc gcc-14.1.0-new/libcpp/macro.cc
--- gcc-14.1.0/libcpp/macro.cc	2024-05-07 10:51:41.000000000 +0400
+++ gcc-14.1.0-new/libcpp/macro.cc	2024-12-09 07:07:26.329933580 +0400
@@ -522,7 +522,7 @@
 		struct tm *tb = NULL;
 		struct stat *st = _cpp_get_file_stat (file);
 		if (st)
-		  tb = localtime (&st->st_mtime);
+		  tb = localtime ((const time_t *)&st->st_mtime);
 		if (tb)
 		  {
 		    char *str = asctime (tb);
diff -Nur gcc-14.1.0/libgfortran/intrinsics/random.c gcc-14.1.0-new/libgfortran/intrinsics/random.c
--- gcc-14.1.0/libgfortran/intrinsics/random.c	2024-05-07 10:51:41.000000000 +0400
+++ gcc-14.1.0-new/libgfortran/intrinsics/random.c	2024-12-09 07:07:26.329933580 +0400
@@ -47,6 +47,10 @@
 #include <_mingw.h> /* For __MINGW64_VERSION_MAJOR  */
 #endif
 
+#ifdef __BIONIC__
+#undef HAVE_GETENTROPY
+#endif
+
 extern void random_r4 (GFC_REAL_4 *);
 iexport_proto(random_r4);
 
diff -Nur gcc-14.1.0/libgfortran/io/unix.c gcc-14.1.0-new/libgfortran/io/unix.c
--- gcc-14.1.0/libgfortran/io/unix.c	2024-05-07 10:51:41.000000000 +0400
+++ gcc-14.1.0-new/libgfortran/io/unix.c	2024-12-09 07:07:26.329933580 +0400
@@ -40,6 +40,9 @@
 #include <string.h>
 #include <errno.h>
 
+#ifdef __BIONIC__
+#undef HAVE_MKOSTEMP
+#endif
 
 /* For mingw, we don't identify files by their inode number, but by a
    64-bit identifier created from a BY_HANDLE_FILE_INFORMATION. */
diff -Nur gcc-14.1.0/libgfortran/runtime/error.c gcc-14.1.0-new/libgfortran/runtime/error.c
--- gcc-14.1.0/libgfortran/runtime/error.c	2024-05-07 10:51:41.000000000 +0400
+++ gcc-14.1.0-new/libgfortran/runtime/error.c	2024-12-09 07:07:26.329933580 +0400
@@ -59,6 +59,10 @@
 #include <process.h>
 #endif
 
+#ifdef __BIONIC__
+#undef HAVE_STRERROR_L
+#endif
+
 
 /* Termination of a program: F2008 2.3.5 talks about "normal
    termination" and "error termination". Normal termination occurs as
diff -Nur gcc-14.1.0/libiberty/configure gcc-14.1.0-new/libiberty/configure
--- gcc-14.1.0/libiberty/configure	2024-05-07 10:51:41.000000000 +0400
+++ gcc-14.1.0-new/libiberty/configure	2024-12-09 07:07:26.329933580 +0400
@@ -5547,7 +5547,7 @@
     if test "$cross_compiling" = yes; then :
   { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
 $as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
-as_fn_error $? "cannot run test program while cross compiling
+echo $? "cannot run test program while cross compiling
 See \`config.log' for more details" "$LINENO" 5; }
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
diff -Nur gcc-14.1.0/libiberty/getpwd.c gcc-14.1.0-new/libiberty/getpwd.c
--- gcc-14.1.0/libiberty/getpwd.c	2024-05-07 10:51:41.000000000 +0400
+++ gcc-14.1.0-new/libiberty/getpwd.c	2024-12-09 07:07:26.329933580 +0400
@@ -39,6 +39,10 @@
 #include <limits.h>
 #endif
 
+#ifdef __BIONIC__
+#include <linux/limits.h>
+#endif
+
 #include "libiberty.h"
 
 /* Virtually every UN*X system now in common use (except for pre-4.3-tahoe
diff -Nur gcc-14.1.0/libstdc++-v3/config/os/bionic/ctype_base.h gcc-14.1.0-new/libstdc++-v3/config/os/bionic/ctype_base.h
--- gcc-14.1.0/libstdc++-v3/config/os/bionic/ctype_base.h	2024-05-07 10:51:41.000000000 +0400
+++ gcc-14.1.0-new/libstdc++-v3/config/os/bionic/ctype_base.h	2024-12-09 07:07:26.333933580 +0400
@@ -28,6 +28,22 @@
 
 // Information as gleaned from /usr/include/ctype.h
 
+#if defined (__ANDROID__)
+#if !defined(_U)
+#if !defined(_CTYPE_U)
+#error Bionic header ctype.h does not define either _U nor _CTYPE_U
+#endif
+#define _U _CTYPE_U
+#define _L _CTYPE_L
+#define _N _CTYPE_N
+#define _S _CTYPE_S
+#define _P _CTYPE_P
+#define _C _CTYPE_C
+#define _X _CTYPE_X
+#define _B _CTYPE_B
+#endif
+#endif /* __ANDROID__ */
+
 namespace std _GLIBCXX_VISIBILITY(default)
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
diff -Nur gcc-14.1.0/libstdc++-v3/include/bits/atomic_wait.h gcc-14.1.0-new/libstdc++-v3/include/bits/atomic_wait.h
--- gcc-14.1.0/libstdc++-v3/include/bits/atomic_wait.h	2024-05-07 10:51:42.000000000 +0400
+++ gcc-14.1.0-new/libstdc++-v3/include/bits/atomic_wait.h	2024-12-09 08:56:42.397931080 +0400
@@ -44,7 +44,11 @@
 # include <cerrno>
 # include <climits>
 # include <unistd.h>
+#ifdef __BIONIC__
+# include <sys/syscall.h>
+#else
 # include <syscall.h>
+#endif
 # include <bits/functexcept.h>
 #endif
 
diff -Nur gcc-14.1.0/libstdc++-v3/libsupc++/guard.cc gcc-14.1.0-new/libstdc++-v3/libsupc++/guard.cc
--- gcc-14.1.0/libstdc++-v3/libsupc++/guard.cc	2024-05-07 10:51:42.000000000 +0400
+++ gcc-14.1.0-new/libstdc++-v3/libsupc++/guard.cc	2024-12-09 07:07:26.333933580 +0400
@@ -63,7 +63,11 @@
 #if defined(__GTHREADS) && defined(__GTHREAD_HAS_COND) \
   && (ATOMIC_INT_LOCK_FREE > 1) && defined(_GLIBCXX_HAVE_LINUX_FUTEX)
 # include <climits>
+#if defined(__ANDROID__)
+# include <sys/syscall.h>
+#else
 # include <syscall.h>
+#endif
 # include <unistd.h>
 # define _GLIBCXX_USE_FUTEX
 # define _GLIBCXX_FUTEX_WAIT 0
diff -Nur gcc-14.1.0/libstdc++-v3/src/c++11/futex.cc gcc-14.1.0-new/libstdc++-v3/src/c++11/futex.cc
--- gcc-14.1.0/libstdc++-v3/src/c++11/futex.cc	2024-05-07 10:51:42.000000000 +0400
+++ gcc-14.1.0-new/libstdc++-v3/src/c++11/futex.cc	2024-12-09 07:07:26.333933580 +0400
@@ -27,7 +27,11 @@
 #if defined(_GLIBCXX_HAVE_LINUX_FUTEX) && ATOMIC_INT_LOCK_FREE > 1
 #include <chrono>
 #include <climits>
+#ifdef __ANDROID__
+#include <sys/syscall.h>
+#else
 #include <syscall.h>
+#endif
 #include <unistd.h>
 #include <sys/time.h>
 #include <errno.h>
diff -Nur gcc-14.1.0/lto-plugin/configure gcc-14.1.0-new/lto-plugin/configure
--- gcc-14.1.0/lto-plugin/configure	2024-05-07 10:52:51.000000000 +0400
+++ gcc-14.1.0-new/lto-plugin/configure	2024-12-09 07:07:26.333933580 +0400
@@ -5814,7 +5814,7 @@
     if test "$cross_compiling" = yes; then :
   { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
 $as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
-as_fn_error $? "cannot run test program while cross compiling
+echo $? "cannot run test program while cross compiling
 See \`config.log' for more details" "$LINENO" 5; }
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
